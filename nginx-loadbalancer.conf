# Define the upstream group of frontend servers
upstream frontend_servers {
    # Use round-robin load balancing (default)
    # Define the three frontend service names as they will appear in docker-compose.yml
    # Ensure these names match the service names in docker-compose.yml
    server frontend1:80;
    server frontend2:80;
    server frontend3:80;

    # Optional: Add least_conn or ip_hash for different balancing methods
    # least_conn;
    # ip_hash;
}

server {
    listen 80; # Listen on port 80 for incoming traffic

    location / {
        # Proxy requests to the upstream group
        proxy_pass http://frontend_servers;

        # Set headers to pass necessary information to the backend servers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Optional: Basic proxy timeouts
        # proxy_connect_timeout 60s;
        # proxy_send_timeout 60s;
        # proxy_read_timeout 60s;

        # Health Checks (Passive): Nginx automatically marks servers as down
        # if they fail to respond after a certain number of attempts/timeout.
        # More advanced active health checks require Nginx Plus or custom modules/scripts.
    }

    # Optional: Add a status page for monitoring (requires stub_status module)
    # location /nginx_status {
    #     stub_status on;
    #     access_log off;
    #     allow 127.0.0.1; # Allow access only from localhost within the container
    #     deny all;
    # }
}
